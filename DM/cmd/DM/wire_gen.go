// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"DM/internal/biz"
	"DM/internal/conf"
	"DM/internal/data"
	"DM/internal/server"
	"DM/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	departmentRepo := data.NewDepartmentRepository(dataData)
	departmentService := biz.NewDepartmentService(departmentRepo)
	serviceDepartmentService := service.NewDepartmentService(departmentService)
	subDepartmentRepo := data.NewSubDepartmentRepository(dataData)
	subDepartmentService := biz.NewSubDepartmentService(subDepartmentRepo)
	serviceSubDepartmentService := service.NewSubDepartmentService(subDepartmentService)
	employeeRepo := data.NewEmployeeRepository(dataData)
	employeeService := biz.NewEmployeeService(employeeRepo)
	serviceEmployeeService := service.NewEmployeeService(employeeService)
	userRepository := data.NewUserRepository(dataData)
	userService := biz.NewUserService(userRepository, employeeRepo)
	serviceUserService := service.NewUserService(userService)
	grpcServer := server.NewGRPCServer(confServer, serviceDepartmentService, serviceSubDepartmentService, serviceEmployeeService, serviceUserService, logger)
	httpServer := server.NewHTTPServer(confServer, serviceDepartmentService, serviceSubDepartmentService, serviceEmployeeService, serviceUserService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
