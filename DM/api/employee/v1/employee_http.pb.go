// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.6.1
// source: employee/v1/employee.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEmployeeServiceCreateEmployee = "/helloworld.v1.EmployeeService/CreateEmployee"
const OperationEmployeeServiceDeleteEmployee = "/helloworld.v1.EmployeeService/DeleteEmployee"
const OperationEmployeeServiceGetAllEmployee = "/helloworld.v1.EmployeeService/GetAllEmployee"
const OperationEmployeeServiceGetEmployeeByID = "/helloworld.v1.EmployeeService/GetEmployeeByID"
const OperationEmployeeServiceGetEmployeeByPage = "/helloworld.v1.EmployeeService/GetEmployeeByPage"
const OperationEmployeeServiceUpdateEmployee = "/helloworld.v1.EmployeeService/UpdateEmployee"

type EmployeeServiceHTTPServer interface {
	CreateEmployee(context.Context, *CreateEmployeeRequest) (*CreateEmployeeRespone, error)
	DeleteEmployee(context.Context, *DeleteEmployeeResquest) (*DeleteEmployeeRespone, error)
	GetAllEmployee(context.Context, *GetAllEmployeeRequest) (*GetAllEmployeeRespone, error)
	GetEmployeeByID(context.Context, *GetEmployeeByIDResquest) (*GetEmployeeByIDRespone, error)
	GetEmployeeByPage(context.Context, *GetEmployeeByPageRequest) (*GetEmployeeByPageRespone, error)
	UpdateEmployee(context.Context, *UpdateEmployeeResquest) (*UpdateEmployeeRespone, error)
}

func RegisterEmployeeServiceHTTPServer(s *http.Server, srv EmployeeServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/employees", _EmployeeService_CreateEmployee0_HTTP_Handler(srv))
	r.GET("/employees", _EmployeeService_GetAllEmployee0_HTTP_Handler(srv))
	r.GET("/employees/page", _EmployeeService_GetEmployeeByPage0_HTTP_Handler(srv))
	r.GET("/employees/{id}", _EmployeeService_GetEmployeeByID0_HTTP_Handler(srv))
	r.PUT("/employees/{id}", _EmployeeService_UpdateEmployee0_HTTP_Handler(srv))
	r.DELETE("/employees/{id}", _EmployeeService_DeleteEmployee0_HTTP_Handler(srv))
}

func _EmployeeService_CreateEmployee0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEmployeeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceCreateEmployee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateEmployee(ctx, req.(*CreateEmployeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEmployeeRespone)
		return ctx.Result(200, reply)
	}
}

func _EmployeeService_GetAllEmployee0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAllEmployeeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceGetAllEmployee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllEmployee(ctx, req.(*GetAllEmployeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAllEmployeeRespone)
		return ctx.Result(200, reply)
	}
}

func _EmployeeService_GetEmployeeByPage0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmployeeByPageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceGetEmployeeByPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEmployeeByPage(ctx, req.(*GetEmployeeByPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEmployeeByPageRespone)
		return ctx.Result(200, reply)
	}
}

func _EmployeeService_GetEmployeeByID0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmployeeByIDResquest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceGetEmployeeByID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEmployeeByID(ctx, req.(*GetEmployeeByIDResquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEmployeeByIDRespone)
		return ctx.Result(200, reply)
	}
}

func _EmployeeService_UpdateEmployee0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEmployeeResquest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceUpdateEmployee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateEmployee(ctx, req.(*UpdateEmployeeResquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateEmployeeRespone)
		return ctx.Result(200, reply)
	}
}

func _EmployeeService_DeleteEmployee0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEmployeeResquest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceDeleteEmployee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteEmployee(ctx, req.(*DeleteEmployeeResquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEmployeeRespone)
		return ctx.Result(200, reply)
	}
}

type EmployeeServiceHTTPClient interface {
	CreateEmployee(ctx context.Context, req *CreateEmployeeRequest, opts ...http.CallOption) (rsp *CreateEmployeeRespone, err error)
	DeleteEmployee(ctx context.Context, req *DeleteEmployeeResquest, opts ...http.CallOption) (rsp *DeleteEmployeeRespone, err error)
	GetAllEmployee(ctx context.Context, req *GetAllEmployeeRequest, opts ...http.CallOption) (rsp *GetAllEmployeeRespone, err error)
	GetEmployeeByID(ctx context.Context, req *GetEmployeeByIDResquest, opts ...http.CallOption) (rsp *GetEmployeeByIDRespone, err error)
	GetEmployeeByPage(ctx context.Context, req *GetEmployeeByPageRequest, opts ...http.CallOption) (rsp *GetEmployeeByPageRespone, err error)
	UpdateEmployee(ctx context.Context, req *UpdateEmployeeResquest, opts ...http.CallOption) (rsp *UpdateEmployeeRespone, err error)
}

type EmployeeServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewEmployeeServiceHTTPClient(client *http.Client) EmployeeServiceHTTPClient {
	return &EmployeeServiceHTTPClientImpl{client}
}

func (c *EmployeeServiceHTTPClientImpl) CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...http.CallOption) (*CreateEmployeeRespone, error) {
	var out CreateEmployeeRespone
	pattern := "/employees"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmployeeServiceCreateEmployee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeServiceHTTPClientImpl) DeleteEmployee(ctx context.Context, in *DeleteEmployeeResquest, opts ...http.CallOption) (*DeleteEmployeeRespone, error) {
	var out DeleteEmployeeRespone
	pattern := "/employees/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeServiceDeleteEmployee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeServiceHTTPClientImpl) GetAllEmployee(ctx context.Context, in *GetAllEmployeeRequest, opts ...http.CallOption) (*GetAllEmployeeRespone, error) {
	var out GetAllEmployeeRespone
	pattern := "/employees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeServiceGetAllEmployee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeServiceHTTPClientImpl) GetEmployeeByID(ctx context.Context, in *GetEmployeeByIDResquest, opts ...http.CallOption) (*GetEmployeeByIDRespone, error) {
	var out GetEmployeeByIDRespone
	pattern := "/employees/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeServiceGetEmployeeByID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeServiceHTTPClientImpl) GetEmployeeByPage(ctx context.Context, in *GetEmployeeByPageRequest, opts ...http.CallOption) (*GetEmployeeByPageRespone, error) {
	var out GetEmployeeByPageRespone
	pattern := "/employees/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeServiceGetEmployeeByPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmployeeServiceHTTPClientImpl) UpdateEmployee(ctx context.Context, in *UpdateEmployeeResquest, opts ...http.CallOption) (*UpdateEmployeeRespone, error) {
	var out UpdateEmployeeRespone
	pattern := "/employees/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmployeeServiceUpdateEmployee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
