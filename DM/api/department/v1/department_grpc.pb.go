// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: department/v1/department.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DepartmentService_CreateDepartment_FullMethodName    = "/helloworld.v1.DepartmentService/CreateDepartment"
	DepartmentService_GetAllDepartment_FullMethodName    = "/helloworld.v1.DepartmentService/GetAllDepartment"
	DepartmentService_GetDepartmentByPage_FullMethodName = "/helloworld.v1.DepartmentService/GetDepartmentByPage"
	DepartmentService_GetDepartmentByID_FullMethodName   = "/helloworld.v1.DepartmentService/GetDepartmentByID"
	DepartmentService_UpdateDepartment_FullMethodName    = "/helloworld.v1.DepartmentService/UpdateDepartment"
	DepartmentService_DeleteDepartment_FullMethodName    = "/helloworld.v1.DepartmentService/DeleteDepartment"
)

// DepartmentServiceClient is the client API for DepartmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentServiceClient interface {
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentRespone, error)
	GetAllDepartment(ctx context.Context, in *GetAllDepartmentRequest, opts ...grpc.CallOption) (*GetAllDepartmentRespone, error)
	GetDepartmentByPage(ctx context.Context, in *GetDepartmentByPageRequest, opts ...grpc.CallOption) (*GetDepartmentByPageRespone, error)
	GetDepartmentByID(ctx context.Context, in *GetDepartmentByIDResquest, opts ...grpc.CallOption) (*GetDepartmentByIDRespone, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentResquest, opts ...grpc.CallOption) (*UpdateDepartmentRespone, error)
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentResquest, opts ...grpc.CallOption) (*DeleteDepartmentRespone, error)
}

type departmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentServiceClient(cc grpc.ClientConnInterface) DepartmentServiceClient {
	return &departmentServiceClient{cc}
}

func (c *departmentServiceClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDepartmentRespone)
	err := c.cc.Invoke(ctx, DepartmentService_CreateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) GetAllDepartment(ctx context.Context, in *GetAllDepartmentRequest, opts ...grpc.CallOption) (*GetAllDepartmentRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllDepartmentRespone)
	err := c.cc.Invoke(ctx, DepartmentService_GetAllDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) GetDepartmentByPage(ctx context.Context, in *GetDepartmentByPageRequest, opts ...grpc.CallOption) (*GetDepartmentByPageRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDepartmentByPageRespone)
	err := c.cc.Invoke(ctx, DepartmentService_GetDepartmentByPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) GetDepartmentByID(ctx context.Context, in *GetDepartmentByIDResquest, opts ...grpc.CallOption) (*GetDepartmentByIDRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDepartmentByIDRespone)
	err := c.cc.Invoke(ctx, DepartmentService_GetDepartmentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentResquest, opts ...grpc.CallOption) (*UpdateDepartmentRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDepartmentRespone)
	err := c.cc.Invoke(ctx, DepartmentService_UpdateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentResquest, opts ...grpc.CallOption) (*DeleteDepartmentRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDepartmentRespone)
	err := c.cc.Invoke(ctx, DepartmentService_DeleteDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentServiceServer is the server API for DepartmentService service.
// All implementations must embed UnimplementedDepartmentServiceServer
// for forward compatibility.
type DepartmentServiceServer interface {
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentRespone, error)
	GetAllDepartment(context.Context, *GetAllDepartmentRequest) (*GetAllDepartmentRespone, error)
	GetDepartmentByPage(context.Context, *GetDepartmentByPageRequest) (*GetDepartmentByPageRespone, error)
	GetDepartmentByID(context.Context, *GetDepartmentByIDResquest) (*GetDepartmentByIDRespone, error)
	UpdateDepartment(context.Context, *UpdateDepartmentResquest) (*UpdateDepartmentRespone, error)
	DeleteDepartment(context.Context, *DeleteDepartmentResquest) (*DeleteDepartmentRespone, error)
	mustEmbedUnimplementedDepartmentServiceServer()
}

// UnimplementedDepartmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDepartmentServiceServer struct{}

func (UnimplementedDepartmentServiceServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedDepartmentServiceServer) GetAllDepartment(context.Context, *GetAllDepartmentRequest) (*GetAllDepartmentRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDepartment not implemented")
}
func (UnimplementedDepartmentServiceServer) GetDepartmentByPage(context.Context, *GetDepartmentByPageRequest) (*GetDepartmentByPageRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentByPage not implemented")
}
func (UnimplementedDepartmentServiceServer) GetDepartmentByID(context.Context, *GetDepartmentByIDResquest) (*GetDepartmentByIDRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentByID not implemented")
}
func (UnimplementedDepartmentServiceServer) UpdateDepartment(context.Context, *UpdateDepartmentResquest) (*UpdateDepartmentRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedDepartmentServiceServer) DeleteDepartment(context.Context, *DeleteDepartmentResquest) (*DeleteDepartmentRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedDepartmentServiceServer) mustEmbedUnimplementedDepartmentServiceServer() {}
func (UnimplementedDepartmentServiceServer) testEmbeddedByValue()                           {}

// UnsafeDepartmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentServiceServer will
// result in compilation errors.
type UnsafeDepartmentServiceServer interface {
	mustEmbedUnimplementedDepartmentServiceServer()
}

func RegisterDepartmentServiceServer(s grpc.ServiceRegistrar, srv DepartmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedDepartmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DepartmentService_ServiceDesc, srv)
}

func _DepartmentService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentService_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_GetAllDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetAllDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentService_GetAllDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetAllDepartment(ctx, req.(*GetAllDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_GetDepartmentByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetDepartmentByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentService_GetDepartmentByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetDepartmentByPage(ctx, req.(*GetDepartmentByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_GetDepartmentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentByIDResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetDepartmentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentService_GetDepartmentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetDepartmentByID(ctx, req.(*GetDepartmentByIDResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentService_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).UpdateDepartment(ctx, req.(*UpdateDepartmentResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentService_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).DeleteDepartment(ctx, req.(*DeleteDepartmentResquest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepartmentService_ServiceDesc is the grpc.ServiceDesc for DepartmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepartmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.DepartmentService",
	HandlerType: (*DepartmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepartment",
			Handler:    _DepartmentService_CreateDepartment_Handler,
		},
		{
			MethodName: "GetAllDepartment",
			Handler:    _DepartmentService_GetAllDepartment_Handler,
		},
		{
			MethodName: "GetDepartmentByPage",
			Handler:    _DepartmentService_GetDepartmentByPage_Handler,
		},
		{
			MethodName: "GetDepartmentByID",
			Handler:    _DepartmentService_GetDepartmentByID_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _DepartmentService_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _DepartmentService_DeleteDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "department/v1/department.proto",
}
