// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.6.1
// source: department/v1/department.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDepartmentServiceCreateDepartment = "/helloworld.v1.DepartmentService/CreateDepartment"
const OperationDepartmentServiceDeleteDepartment = "/helloworld.v1.DepartmentService/DeleteDepartment"
const OperationDepartmentServiceGetAllDepartment = "/helloworld.v1.DepartmentService/GetAllDepartment"
const OperationDepartmentServiceGetDepartmentByID = "/helloworld.v1.DepartmentService/GetDepartmentByID"
const OperationDepartmentServiceGetDepartmentByPage = "/helloworld.v1.DepartmentService/GetDepartmentByPage"
const OperationDepartmentServiceUpdateDepartment = "/helloworld.v1.DepartmentService/UpdateDepartment"

type DepartmentServiceHTTPServer interface {
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentRespone, error)
	DeleteDepartment(context.Context, *DeleteDepartmentResquest) (*DeleteDepartmentRespone, error)
	GetAllDepartment(context.Context, *GetAllDepartmentRequest) (*GetAllDepartmentRespone, error)
	GetDepartmentByID(context.Context, *GetDepartmentByIDResquest) (*GetDepartmentByIDRespone, error)
	GetDepartmentByPage(context.Context, *GetDepartmentByPageRequest) (*GetDepartmentByPageRespone, error)
	UpdateDepartment(context.Context, *UpdateDepartmentResquest) (*UpdateDepartmentRespone, error)
}

func RegisterDepartmentServiceHTTPServer(s *http.Server, srv DepartmentServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/departments", _DepartmentService_CreateDepartment0_HTTP_Handler(srv))
	r.GET("/departments", _DepartmentService_GetAllDepartment0_HTTP_Handler(srv))
	r.GET("/departments/page", _DepartmentService_GetDepartmentByPage0_HTTP_Handler(srv))
	r.GET("/departments/{id}", _DepartmentService_GetDepartmentByID0_HTTP_Handler(srv))
	r.PUT("/departments/{id}", _DepartmentService_UpdateDepartment0_HTTP_Handler(srv))
	r.DELETE("/departments/{id}", _DepartmentService_DeleteDepartment0_HTTP_Handler(srv))
}

func _DepartmentService_CreateDepartment0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDepartmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceCreateDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDepartment(ctx, req.(*CreateDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDepartmentRespone)
		return ctx.Result(200, reply)
	}
}

func _DepartmentService_GetAllDepartment0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAllDepartmentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceGetAllDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllDepartment(ctx, req.(*GetAllDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAllDepartmentRespone)
		return ctx.Result(200, reply)
	}
}

func _DepartmentService_GetDepartmentByPage0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDepartmentByPageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceGetDepartmentByPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDepartmentByPage(ctx, req.(*GetDepartmentByPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDepartmentByPageRespone)
		return ctx.Result(200, reply)
	}
}

func _DepartmentService_GetDepartmentByID0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDepartmentByIDResquest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceGetDepartmentByID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDepartmentByID(ctx, req.(*GetDepartmentByIDResquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDepartmentByIDRespone)
		return ctx.Result(200, reply)
	}
}

func _DepartmentService_UpdateDepartment0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDepartmentResquest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceUpdateDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDepartment(ctx, req.(*UpdateDepartmentResquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDepartmentRespone)
		return ctx.Result(200, reply)
	}
}

func _DepartmentService_DeleteDepartment0_HTTP_Handler(srv DepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDepartmentResquest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDepartmentServiceDeleteDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDepartment(ctx, req.(*DeleteDepartmentResquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDepartmentRespone)
		return ctx.Result(200, reply)
	}
}

type DepartmentServiceHTTPClient interface {
	CreateDepartment(ctx context.Context, req *CreateDepartmentRequest, opts ...http.CallOption) (rsp *CreateDepartmentRespone, err error)
	DeleteDepartment(ctx context.Context, req *DeleteDepartmentResquest, opts ...http.CallOption) (rsp *DeleteDepartmentRespone, err error)
	GetAllDepartment(ctx context.Context, req *GetAllDepartmentRequest, opts ...http.CallOption) (rsp *GetAllDepartmentRespone, err error)
	GetDepartmentByID(ctx context.Context, req *GetDepartmentByIDResquest, opts ...http.CallOption) (rsp *GetDepartmentByIDRespone, err error)
	GetDepartmentByPage(ctx context.Context, req *GetDepartmentByPageRequest, opts ...http.CallOption) (rsp *GetDepartmentByPageRespone, err error)
	UpdateDepartment(ctx context.Context, req *UpdateDepartmentResquest, opts ...http.CallOption) (rsp *UpdateDepartmentRespone, err error)
}

type DepartmentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDepartmentServiceHTTPClient(client *http.Client) DepartmentServiceHTTPClient {
	return &DepartmentServiceHTTPClientImpl{client}
}

func (c *DepartmentServiceHTTPClientImpl) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...http.CallOption) (*CreateDepartmentRespone, error) {
	var out CreateDepartmentRespone
	pattern := "/departments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDepartmentServiceCreateDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DepartmentServiceHTTPClientImpl) DeleteDepartment(ctx context.Context, in *DeleteDepartmentResquest, opts ...http.CallOption) (*DeleteDepartmentRespone, error) {
	var out DeleteDepartmentRespone
	pattern := "/departments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDepartmentServiceDeleteDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DepartmentServiceHTTPClientImpl) GetAllDepartment(ctx context.Context, in *GetAllDepartmentRequest, opts ...http.CallOption) (*GetAllDepartmentRespone, error) {
	var out GetAllDepartmentRespone
	pattern := "/departments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDepartmentServiceGetAllDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DepartmentServiceHTTPClientImpl) GetDepartmentByID(ctx context.Context, in *GetDepartmentByIDResquest, opts ...http.CallOption) (*GetDepartmentByIDRespone, error) {
	var out GetDepartmentByIDRespone
	pattern := "/departments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDepartmentServiceGetDepartmentByID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DepartmentServiceHTTPClientImpl) GetDepartmentByPage(ctx context.Context, in *GetDepartmentByPageRequest, opts ...http.CallOption) (*GetDepartmentByPageRespone, error) {
	var out GetDepartmentByPageRespone
	pattern := "/departments/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDepartmentServiceGetDepartmentByPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DepartmentServiceHTTPClientImpl) UpdateDepartment(ctx context.Context, in *UpdateDepartmentResquest, opts ...http.CallOption) (*UpdateDepartmentRespone, error) {
	var out UpdateDepartmentRespone
	pattern := "/departments/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDepartmentServiceUpdateDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
