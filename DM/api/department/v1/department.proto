syntax = "proto3";

package helloworld.v1;

import "google/api/annotations.proto";
import "sub_department/v1/sub_department.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "DM/api/department/v1;v1";

option java_multiple_files = true;
option java_package = "dev.kratos.api.helloworld.v1";
option java_outer_classname = "HelloworldProtoV1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Department",
		version: "1.0",
		contact: {
			name: "Department managerment project",
			url: "https://github.com/grpc-ecosystem/grpc-gateway",
			email: "none@example.com",
		},
		license: {
			name: "BSD 3-Clause License",
			url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt",
		},
		extensions: {
			key: "x-something-something",
			value {
				string_value: "yadda",
			}
		}
    }
    security_definitions: {
        security: {
            key: "bearer"
            value: {
                type: TYPE_API_KEY,
                in: IN_HEADER,
                name: "Authorization",
                description: "Authentication token, prefixed by Bearer: Bearer <token>",
            }
        }
    }
    security: {
        security_requirement: {
            key: "bearer",
        }
    }
};

service DepartmentService{
    rpc CreateDepartment(CreateDepartmentRequest) returns (CreateDepartmentRespone){
        option (google.api.http) = {
            post: "/departments"
            body: "*"
          };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security:  {
                security_requirement: {
                    key: "bearer",
                }
            } 
        };
    }

    rpc GetAllDepartment(GetAllDepartmentRequest) returns (GetAllDepartmentRespone){
        option (google.api.http) = {
            get: "/departments"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            external_docs: {
              url: "https://github.com/grpc-ecosystem/grpc-gateway",
              description: "Get all department"
            },
            security:  {
                security_requirement: {
                    key: "bearer",
                }
            } 
        };
    }

    rpc GetDepartmentByPage(GetDepartmentByPageRequest) returns (GetDepartmentByPageRespone){
        option (google.api.http) = {
            get : "/departments/page"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            external_docs: {
              url: "https://github.com/grpc-ecosystem/grpc-gateway",
              description: "Get department per page"
            },
            security:  {
                security_requirement: {
                    key: "bearer",
                }
            } 
        };
    }

    rpc GetDepartmentByID(GetDepartmentByIDResquest) returns (GetDepartmentByIDRespone){
        option (google.api.http) = {
            get: "/departments/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            external_docs: {
              url: "https://github.com/grpc-ecosystem/grpc-gateway",
              description: "Get department by ID"
            },
            security:  {
                security_requirement: {
                    key: "bearer",
                }
            } 
        };
    }

    rpc UpdateDepartment(UpdateDepartmentResquest) returns (UpdateDepartmentRespone){
        option (google.api.http) = {
            put: "/departments/{id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            external_docs: {
              url: "https://github.com/grpc-ecosystem/grpc-gateway",
              description: "Update department"
            },
            security:  {
                security_requirement: {
                    key: "bearer",
                }
            } 
        };
    }

    rpc DeleteDepartment(DeleteDepartmentResquest) returns (DeleteDepartmentRespone){
        option (google.api.http) = {
            delete: "/departments/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            external_docs: {
              url: "https://github.com/grpc-ecosystem/grpc-gateway",
              description: "Delete a department"
            },
            security:  {
                security_requirement: {
                    key: "bearer",
                }
            } 
        };
    }
}

message CreateDepartmentRequest{
    string name = 1;
}

message CreateDepartmentRespone{
    uint32 id = 1;
}

message GetAllDepartmentRequest{}

message GetAllDepartmentRespone{
    repeated Department departments = 1;
}

message GetDepartmentByIDResquest{
    uint32 id = 1;
}

message GetDepartmentByIDRespone{
    uint32 id = 1;
    string name = 2;
}

message UpdateDepartmentResquest{
    uint32 id = 1;
    string name = 2;
}

message UpdateDepartmentRespone{}

message DeleteDepartmentResquest{
    uint32 id = 1;
}

message DeleteDepartmentRespone{}

message GetDepartmentByPageRequest{
    uint32 page = 1;
    uint32 limit = 2;
}

message GetDepartmentByPageRespone{
    repeated Department departments = 1;
}

message Department{
    uint32 id = 1;
    string name = 2;
    repeated SubDepartment subdepartments = 3;
}
