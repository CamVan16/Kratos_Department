// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: sub_department/v1/sub_department.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubDepartmentService_CreateSubDepartment_FullMethodName    = "/helloworld.v1.SubDepartmentService/CreateSubDepartment"
	SubDepartmentService_GetAllSubDepartment_FullMethodName    = "/helloworld.v1.SubDepartmentService/GetAllSubDepartment"
	SubDepartmentService_GetSubDepartmentByPage_FullMethodName = "/helloworld.v1.SubDepartmentService/GetSubDepartmentByPage"
	SubDepartmentService_GetSubDepartmentByID_FullMethodName   = "/helloworld.v1.SubDepartmentService/GetSubDepartmentByID"
	SubDepartmentService_UpdateSubDepartment_FullMethodName    = "/helloworld.v1.SubDepartmentService/UpdateSubDepartment"
	SubDepartmentService_DeleteSubDepartment_FullMethodName    = "/helloworld.v1.SubDepartmentService/DeleteSubDepartment"
)

// SubDepartmentServiceClient is the client API for SubDepartmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubDepartmentServiceClient interface {
	CreateSubDepartment(ctx context.Context, in *CreateSubDepartmentRequest, opts ...grpc.CallOption) (*CreateSubDepartmentRespone, error)
	GetAllSubDepartment(ctx context.Context, in *GetAllSubDepartmentRequest, opts ...grpc.CallOption) (*GetAllSubDepartmentRespone, error)
	GetSubDepartmentByPage(ctx context.Context, in *GetSubDepartmentByPageRequest, opts ...grpc.CallOption) (*GetSubDepartmentByPageRespone, error)
	GetSubDepartmentByID(ctx context.Context, in *GetSubDepartmentByIDResquest, opts ...grpc.CallOption) (*GetSubDepartmentByIDRespone, error)
	UpdateSubDepartment(ctx context.Context, in *UpdateSubDepartmentResquest, opts ...grpc.CallOption) (*UpdateSubDepartmentRespone, error)
	DeleteSubDepartment(ctx context.Context, in *DeleteSubDepartmentResquest, opts ...grpc.CallOption) (*DeleteSubDepartmentRespone, error)
}

type subDepartmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubDepartmentServiceClient(cc grpc.ClientConnInterface) SubDepartmentServiceClient {
	return &subDepartmentServiceClient{cc}
}

func (c *subDepartmentServiceClient) CreateSubDepartment(ctx context.Context, in *CreateSubDepartmentRequest, opts ...grpc.CallOption) (*CreateSubDepartmentRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSubDepartmentRespone)
	err := c.cc.Invoke(ctx, SubDepartmentService_CreateSubDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subDepartmentServiceClient) GetAllSubDepartment(ctx context.Context, in *GetAllSubDepartmentRequest, opts ...grpc.CallOption) (*GetAllSubDepartmentRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSubDepartmentRespone)
	err := c.cc.Invoke(ctx, SubDepartmentService_GetAllSubDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subDepartmentServiceClient) GetSubDepartmentByPage(ctx context.Context, in *GetSubDepartmentByPageRequest, opts ...grpc.CallOption) (*GetSubDepartmentByPageRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubDepartmentByPageRespone)
	err := c.cc.Invoke(ctx, SubDepartmentService_GetSubDepartmentByPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subDepartmentServiceClient) GetSubDepartmentByID(ctx context.Context, in *GetSubDepartmentByIDResquest, opts ...grpc.CallOption) (*GetSubDepartmentByIDRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubDepartmentByIDRespone)
	err := c.cc.Invoke(ctx, SubDepartmentService_GetSubDepartmentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subDepartmentServiceClient) UpdateSubDepartment(ctx context.Context, in *UpdateSubDepartmentResquest, opts ...grpc.CallOption) (*UpdateSubDepartmentRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSubDepartmentRespone)
	err := c.cc.Invoke(ctx, SubDepartmentService_UpdateSubDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subDepartmentServiceClient) DeleteSubDepartment(ctx context.Context, in *DeleteSubDepartmentResquest, opts ...grpc.CallOption) (*DeleteSubDepartmentRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSubDepartmentRespone)
	err := c.cc.Invoke(ctx, SubDepartmentService_DeleteSubDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubDepartmentServiceServer is the server API for SubDepartmentService service.
// All implementations must embed UnimplementedSubDepartmentServiceServer
// for forward compatibility.
type SubDepartmentServiceServer interface {
	CreateSubDepartment(context.Context, *CreateSubDepartmentRequest) (*CreateSubDepartmentRespone, error)
	GetAllSubDepartment(context.Context, *GetAllSubDepartmentRequest) (*GetAllSubDepartmentRespone, error)
	GetSubDepartmentByPage(context.Context, *GetSubDepartmentByPageRequest) (*GetSubDepartmentByPageRespone, error)
	GetSubDepartmentByID(context.Context, *GetSubDepartmentByIDResquest) (*GetSubDepartmentByIDRespone, error)
	UpdateSubDepartment(context.Context, *UpdateSubDepartmentResquest) (*UpdateSubDepartmentRespone, error)
	DeleteSubDepartment(context.Context, *DeleteSubDepartmentResquest) (*DeleteSubDepartmentRespone, error)
	mustEmbedUnimplementedSubDepartmentServiceServer()
}

// UnimplementedSubDepartmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubDepartmentServiceServer struct{}

func (UnimplementedSubDepartmentServiceServer) CreateSubDepartment(context.Context, *CreateSubDepartmentRequest) (*CreateSubDepartmentRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubDepartment not implemented")
}
func (UnimplementedSubDepartmentServiceServer) GetAllSubDepartment(context.Context, *GetAllSubDepartmentRequest) (*GetAllSubDepartmentRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubDepartment not implemented")
}
func (UnimplementedSubDepartmentServiceServer) GetSubDepartmentByPage(context.Context, *GetSubDepartmentByPageRequest) (*GetSubDepartmentByPageRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubDepartmentByPage not implemented")
}
func (UnimplementedSubDepartmentServiceServer) GetSubDepartmentByID(context.Context, *GetSubDepartmentByIDResquest) (*GetSubDepartmentByIDRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubDepartmentByID not implemented")
}
func (UnimplementedSubDepartmentServiceServer) UpdateSubDepartment(context.Context, *UpdateSubDepartmentResquest) (*UpdateSubDepartmentRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubDepartment not implemented")
}
func (UnimplementedSubDepartmentServiceServer) DeleteSubDepartment(context.Context, *DeleteSubDepartmentResquest) (*DeleteSubDepartmentRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubDepartment not implemented")
}
func (UnimplementedSubDepartmentServiceServer) mustEmbedUnimplementedSubDepartmentServiceServer() {}
func (UnimplementedSubDepartmentServiceServer) testEmbeddedByValue()                              {}

// UnsafeSubDepartmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubDepartmentServiceServer will
// result in compilation errors.
type UnsafeSubDepartmentServiceServer interface {
	mustEmbedUnimplementedSubDepartmentServiceServer()
}

func RegisterSubDepartmentServiceServer(s grpc.ServiceRegistrar, srv SubDepartmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubDepartmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubDepartmentService_ServiceDesc, srv)
}

func _SubDepartmentService_CreateSubDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubDepartmentServiceServer).CreateSubDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubDepartmentService_CreateSubDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubDepartmentServiceServer).CreateSubDepartment(ctx, req.(*CreateSubDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubDepartmentService_GetAllSubDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSubDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubDepartmentServiceServer).GetAllSubDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubDepartmentService_GetAllSubDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubDepartmentServiceServer).GetAllSubDepartment(ctx, req.(*GetAllSubDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubDepartmentService_GetSubDepartmentByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubDepartmentByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubDepartmentServiceServer).GetSubDepartmentByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubDepartmentService_GetSubDepartmentByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubDepartmentServiceServer).GetSubDepartmentByPage(ctx, req.(*GetSubDepartmentByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubDepartmentService_GetSubDepartmentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubDepartmentByIDResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubDepartmentServiceServer).GetSubDepartmentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubDepartmentService_GetSubDepartmentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubDepartmentServiceServer).GetSubDepartmentByID(ctx, req.(*GetSubDepartmentByIDResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubDepartmentService_UpdateSubDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubDepartmentResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubDepartmentServiceServer).UpdateSubDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubDepartmentService_UpdateSubDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubDepartmentServiceServer).UpdateSubDepartment(ctx, req.(*UpdateSubDepartmentResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubDepartmentService_DeleteSubDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubDepartmentResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubDepartmentServiceServer).DeleteSubDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubDepartmentService_DeleteSubDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubDepartmentServiceServer).DeleteSubDepartment(ctx, req.(*DeleteSubDepartmentResquest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubDepartmentService_ServiceDesc is the grpc.ServiceDesc for SubDepartmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubDepartmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.SubDepartmentService",
	HandlerType: (*SubDepartmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubDepartment",
			Handler:    _SubDepartmentService_CreateSubDepartment_Handler,
		},
		{
			MethodName: "GetAllSubDepartment",
			Handler:    _SubDepartmentService_GetAllSubDepartment_Handler,
		},
		{
			MethodName: "GetSubDepartmentByPage",
			Handler:    _SubDepartmentService_GetSubDepartmentByPage_Handler,
		},
		{
			MethodName: "GetSubDepartmentByID",
			Handler:    _SubDepartmentService_GetSubDepartmentByID_Handler,
		},
		{
			MethodName: "UpdateSubDepartment",
			Handler:    _SubDepartmentService_UpdateSubDepartment_Handler,
		},
		{
			MethodName: "DeleteSubDepartment",
			Handler:    _SubDepartmentService_DeleteSubDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sub_department/v1/sub_department.proto",
}
