// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.6.1
// source: sub_department/v1/sub_department.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSubDepartmentServiceCreateSubDepartment = "/helloworld.v1.SubDepartmentService/CreateSubDepartment"
const OperationSubDepartmentServiceDeleteSubDepartment = "/helloworld.v1.SubDepartmentService/DeleteSubDepartment"
const OperationSubDepartmentServiceGetAllSubDepartment = "/helloworld.v1.SubDepartmentService/GetAllSubDepartment"
const OperationSubDepartmentServiceGetSubDepartmentByID = "/helloworld.v1.SubDepartmentService/GetSubDepartmentByID"
const OperationSubDepartmentServiceGetSubDepartmentByPage = "/helloworld.v1.SubDepartmentService/GetSubDepartmentByPage"
const OperationSubDepartmentServiceUpdateSubDepartment = "/helloworld.v1.SubDepartmentService/UpdateSubDepartment"

type SubDepartmentServiceHTTPServer interface {
	CreateSubDepartment(context.Context, *CreateSubDepartmentRequest) (*CreateSubDepartmentRespone, error)
	DeleteSubDepartment(context.Context, *DeleteSubDepartmentResquest) (*DeleteSubDepartmentRespone, error)
	GetAllSubDepartment(context.Context, *GetAllSubDepartmentRequest) (*GetAllSubDepartmentRespone, error)
	GetSubDepartmentByID(context.Context, *GetSubDepartmentByIDResquest) (*GetSubDepartmentByIDRespone, error)
	GetSubDepartmentByPage(context.Context, *GetSubDepartmentByPageRequest) (*GetSubDepartmentByPageRespone, error)
	UpdateSubDepartment(context.Context, *UpdateSubDepartmentResquest) (*UpdateSubDepartmentRespone, error)
}

func RegisterSubDepartmentServiceHTTPServer(s *http.Server, srv SubDepartmentServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/sub_departments", _SubDepartmentService_CreateSubDepartment0_HTTP_Handler(srv))
	r.GET("/sub_departments", _SubDepartmentService_GetAllSubDepartment0_HTTP_Handler(srv))
	r.GET("/sub_departments/page", _SubDepartmentService_GetSubDepartmentByPage0_HTTP_Handler(srv))
	r.GET("/sub_departments/{id}", _SubDepartmentService_GetSubDepartmentByID0_HTTP_Handler(srv))
	r.PUT("/sub_departments/{id}", _SubDepartmentService_UpdateSubDepartment0_HTTP_Handler(srv))
	r.DELETE("/sub_departments/{id}", _SubDepartmentService_DeleteSubDepartment0_HTTP_Handler(srv))
}

func _SubDepartmentService_CreateSubDepartment0_HTTP_Handler(srv SubDepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSubDepartmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubDepartmentServiceCreateSubDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSubDepartment(ctx, req.(*CreateSubDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSubDepartmentRespone)
		return ctx.Result(200, reply)
	}
}

func _SubDepartmentService_GetAllSubDepartment0_HTTP_Handler(srv SubDepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAllSubDepartmentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubDepartmentServiceGetAllSubDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllSubDepartment(ctx, req.(*GetAllSubDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAllSubDepartmentRespone)
		return ctx.Result(200, reply)
	}
}

func _SubDepartmentService_GetSubDepartmentByPage0_HTTP_Handler(srv SubDepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubDepartmentByPageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubDepartmentServiceGetSubDepartmentByPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubDepartmentByPage(ctx, req.(*GetSubDepartmentByPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubDepartmentByPageRespone)
		return ctx.Result(200, reply)
	}
}

func _SubDepartmentService_GetSubDepartmentByID0_HTTP_Handler(srv SubDepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubDepartmentByIDResquest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubDepartmentServiceGetSubDepartmentByID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubDepartmentByID(ctx, req.(*GetSubDepartmentByIDResquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubDepartmentByIDRespone)
		return ctx.Result(200, reply)
	}
}

func _SubDepartmentService_UpdateSubDepartment0_HTTP_Handler(srv SubDepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSubDepartmentResquest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubDepartmentServiceUpdateSubDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSubDepartment(ctx, req.(*UpdateSubDepartmentResquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSubDepartmentRespone)
		return ctx.Result(200, reply)
	}
}

func _SubDepartmentService_DeleteSubDepartment0_HTTP_Handler(srv SubDepartmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSubDepartmentResquest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubDepartmentServiceDeleteSubDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSubDepartment(ctx, req.(*DeleteSubDepartmentResquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSubDepartmentRespone)
		return ctx.Result(200, reply)
	}
}

type SubDepartmentServiceHTTPClient interface {
	CreateSubDepartment(ctx context.Context, req *CreateSubDepartmentRequest, opts ...http.CallOption) (rsp *CreateSubDepartmentRespone, err error)
	DeleteSubDepartment(ctx context.Context, req *DeleteSubDepartmentResquest, opts ...http.CallOption) (rsp *DeleteSubDepartmentRespone, err error)
	GetAllSubDepartment(ctx context.Context, req *GetAllSubDepartmentRequest, opts ...http.CallOption) (rsp *GetAllSubDepartmentRespone, err error)
	GetSubDepartmentByID(ctx context.Context, req *GetSubDepartmentByIDResquest, opts ...http.CallOption) (rsp *GetSubDepartmentByIDRespone, err error)
	GetSubDepartmentByPage(ctx context.Context, req *GetSubDepartmentByPageRequest, opts ...http.CallOption) (rsp *GetSubDepartmentByPageRespone, err error)
	UpdateSubDepartment(ctx context.Context, req *UpdateSubDepartmentResquest, opts ...http.CallOption) (rsp *UpdateSubDepartmentRespone, err error)
}

type SubDepartmentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSubDepartmentServiceHTTPClient(client *http.Client) SubDepartmentServiceHTTPClient {
	return &SubDepartmentServiceHTTPClientImpl{client}
}

func (c *SubDepartmentServiceHTTPClientImpl) CreateSubDepartment(ctx context.Context, in *CreateSubDepartmentRequest, opts ...http.CallOption) (*CreateSubDepartmentRespone, error) {
	var out CreateSubDepartmentRespone
	pattern := "/sub_departments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSubDepartmentServiceCreateSubDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SubDepartmentServiceHTTPClientImpl) DeleteSubDepartment(ctx context.Context, in *DeleteSubDepartmentResquest, opts ...http.CallOption) (*DeleteSubDepartmentRespone, error) {
	var out DeleteSubDepartmentRespone
	pattern := "/sub_departments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSubDepartmentServiceDeleteSubDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SubDepartmentServiceHTTPClientImpl) GetAllSubDepartment(ctx context.Context, in *GetAllSubDepartmentRequest, opts ...http.CallOption) (*GetAllSubDepartmentRespone, error) {
	var out GetAllSubDepartmentRespone
	pattern := "/sub_departments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSubDepartmentServiceGetAllSubDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SubDepartmentServiceHTTPClientImpl) GetSubDepartmentByID(ctx context.Context, in *GetSubDepartmentByIDResquest, opts ...http.CallOption) (*GetSubDepartmentByIDRespone, error) {
	var out GetSubDepartmentByIDRespone
	pattern := "/sub_departments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSubDepartmentServiceGetSubDepartmentByID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SubDepartmentServiceHTTPClientImpl) GetSubDepartmentByPage(ctx context.Context, in *GetSubDepartmentByPageRequest, opts ...http.CallOption) (*GetSubDepartmentByPageRespone, error) {
	var out GetSubDepartmentByPageRespone
	pattern := "/sub_departments/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSubDepartmentServiceGetSubDepartmentByPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SubDepartmentServiceHTTPClientImpl) UpdateSubDepartment(ctx context.Context, in *UpdateSubDepartmentResquest, opts ...http.CallOption) (*UpdateSubDepartmentRespone, error) {
	var out UpdateSubDepartmentRespone
	pattern := "/sub_departments/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSubDepartmentServiceUpdateSubDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
